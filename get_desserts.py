import os
import asyncio
import traceback
import datetime
from playwright.async_api import async_playwright
from telegram import Bot
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
JOWI_LOGIN = os.getenv("JOWI_LOGIN")
JOWI_PASSWORD = os.getenv("JOWI_PASSWORD")
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = "-4820879112"
MAX_TIMEOUT = 120000  # 2 –º–∏–Ω—É—Ç—ã

# URL –æ—Ç—á–µ—Ç–∞ –∏ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏—â–µ–º
COURSES_REPORT_URL = "https://app.jowi.club/ru/restaurants/ef62ef82-e7a3-4909-bb8b-906257ebd17c/courses_report"
ITEMS_TO_FIND = ["–ú–æ—Ä–æ–∂–Ω–∏–π —à–∞—Ä–∏–∫ (1—à—Ç)", "–ü–∏—Ä–æ–∂–µ–Ω–Ω–æ–µ"]

# --- –§—É–Ω–∫—Ü–∏–∏ ---

async def send_report(message: str, photo_path: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ Telegram."""
    if not all([BOT_TOKEN, GROUP_ID]):
        print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return
    try:
        bot = Bot(token=BOT_TOKEN)
        if photo_path and os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo_file:
                await bot.send_photo(chat_id=GROUP_ID, photo=photo_file, caption=message, parse_mode='HTML')
            os.remove(photo_path)
        else:
            await bot.send_message(chat_id=GROUP_ID, text=message, parse_mode='HTML')
        print("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫—Ä–∏–ø—Ç–∞."""
    results = {item: 0 for item in ITEMS_TO_FIND}
    log_steps = []
    screenshot_path = "dessert_report_error.png"

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()
        page.set_default_timeout(MAX_TIMEOUT)

        try:
            # --- –®–∞–≥ 1: –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É ---
            log_steps.append("1. –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç—á–µ—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É—é—Å—å...")
            await page.goto(COURSES_REPORT_URL)
            await page.wait_for_url("**/users/sign_in")
            await page.locator('#user_email').fill(JOWI_LOGIN)
            await page.locator('input[name="user[password]"]').fill(JOWI_PASSWORD)
            await page.locator('button:has-text("–í–æ–π—Ç–∏")').first().click()
            await page.wait_for_url(COURSES_REPORT_URL)
            print("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–ª—é–¥–∞–º.")

            # --- –®–∞–≥ 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
            log_steps.append("2. –ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä—ã '–í—á–µ—Ä–∞' (—á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å) –∏ '–î–µ—Å–µ—Ä—Ç—ã'...")
            
            # --- –ù–û–í–´–ô –í–´–ë–û–† –î–ê–¢–´ –í–†–£–ß–ù–£–Æ ---
            yesterday = datetime.date.today() - datetime.timedelta(days=1)
            yesterday_day_str = str(yesterday.day)
            
            # –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É "–û—Ç"
            await page.get_by_role('textbox', name='–û—Ç:').click()
            await page.get_by_role('cell', name=yesterday_day_str, exact=True).first.click()
            print(f"  - –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ '–û—Ç': {yesterday.strftime('%d.%m.%Y')}")

            # –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É "–î–æ"
            await page.get_by_role('textbox', name='–î–æ:').click()
            await page.get_by_role('cell', name=yesterday_day_str, exact=True).first.click()
            print(f"  - –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ '–î–æ': {yesterday.strftime('%d.%m.%Y')}")

            # --- –í–´–ë–û–† –ö–ê–¢–ï–ì–û–†–ò–ò ---
            await page.get_by_role('textbox', name='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏').click()
            await page.wait_for_timeout(1000) # –ü–∞—É–∑–∞ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            await page.locator('.ui-menu-item-wrapper:has-text("–î–µ—Å–µ—Ä—Ç—ã")').click()
            print("  - –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–î–µ—Å–µ—Ä—Ç—ã' –≤—ã–±—Ä–∞–Ω–∞.")

            # –ù–∞—á–∏–Ω–∞–µ–º –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ –Ω–∞–∂–∏–º–∞–µ–º –ø–æ–∏—Å–∫
            async with page.expect_response(lambda r: "courses_report" in r.url and r.status == 200) as response_info:
                await page.get_by_role('button', name='–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫').click()
            await response_info.value
            print("–§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

            # --- –®–∞–≥ 3: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ---
            log_steps.append("3. –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...")
            for item_name in ITEMS_TO_FIND:
                row = page.locator(f'tr:has-text("{item_name}")')
                if await row.count() > 0:
                    quantity_text = await row.locator("td").nth(2).inner_text()
                    results[item_name] = int(quantity_text)
                    print(f"  - –ù–∞–π–¥–µ–Ω–æ '{item_name}': {quantity_text} —à—Ç.")
                else:
                    print(f"  - –¢–æ–≤–∞—Ä '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—á–µ—Ç–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0).")

            # --- –®–∞–≥ 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ ---
            yesterday_str = yesterday.strftime('%d.%m.%Y')
            report_lines = [f"<b>–û—Ç—á–µ—Ç –ø–æ –¥–µ—Å–µ—Ä—Ç–∞–º (Tandoor) –∑–∞ {yesterday_str}</b>", ""]
            for name, qty in results.items():
                report_lines.append(f"<b>{name}:</b> {qty} —à—Ç.")
            
            await send_report("\n".join(report_lines))

        except Exception:
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ ---
            print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!")
            await page.screenshot(path="dessert_report_error.png")
            error_trace = traceback.format_exc()
            error_details = (
                f"<b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –¥–µ—Å–µ—Ä—Ç–∞–º</b>\n\n"
                f"‚ùå <b>–°–±–æ–π –Ω–∞ —à–∞–≥–µ:</b>\n<code>{log_steps[-1]}</code>\n\n"
                f"üìÑ <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:</b>\n<pre>{error_trace.splitlines()[-1]}</pre>"
            )
            await send_report(error_details, photo_path="dessert_report_error.png")
        
        finally:
            await browser.close()
            print("\n–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    asyncio.run(main())
